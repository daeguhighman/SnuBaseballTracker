openapi: 3.0.0 # 변경사항
info:
  version: '1'
  title: 'SnuBaseballTracker'
  description: 'SnuBaseballTracker API'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUNDONGHYUN/SnuBaseballTracker/1.0.0
tags: 
  - name: auth
  - name: teams
  - name: records
  - name: games
  
paths:
  /auth/email/request:
    post:
      summary: "이메일 인증번호 발송"
      description: |
        사용자 이메일(@snu.ac.kr)로 인증번호를 발송합니다.
        이미 인증번호가 발급된 경우 새로 갱신됩니다.
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
      responses:
        "200":
          description: "인증번호 발송 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification code sent to junho@snu.ac.kr."
        "400":
          description: "잘못된 이메일 형식 또는 도메인 아님"
        "429":
          description: "요청 횟수 초과"
  /auth/email/verify:
    post:
      summary: "이메일 인증번호 검증"
      description: "이메일과 인증번호를 검증하여 이메일 소유 여부를 확인합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
                code:
                  type: string
                  example: "847219"
      responses:
        "200":
          description: "인증 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email successfully verified."
        "400":
          description: "잘못된 코드 또는 만료됨"
  /auth/signup:
    post:
      summary: "회원가입 (비밀번호 설정)"
      description: |
        이메일 인증을 마친 사용자가 비밀번호를 설정하여 최종 가입합니다.
        이미 가입된 이메일일 경우 에러 반환.
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
                password:
                  type: string
                  format: password
                  example: "mypassword123!"
      responses:
        "200":
          description: "회원가입 완료"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful. You can now log in."
        "400":
          description: "이메일 인증이 안 되었거나 이미 가입됨"

  /auth/login:
    post:
      summary: "로그인"
      description: "이메일과 비밀번호로 로그인합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
                password:
                  type: string
                  format: password
                  example: "mypassword123!"
      responses:
        "200":
          description: "로그인 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "이메일 또는 비밀번호가 잘못됨"

  /auth/password/reset-request:
    post:
      summary: "비밀번호 재설정 링크 요청"
      description: "사용자 이메일로 비밀번호 재설정 링크를 전송합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: "재설정 링크 전송 성공"
        "404":
          description: "가입되지 않은 이메일"



  /auth/password/reset:
    post:
      summary: "비밀번호 재설정"
      description: "이메일로 받은 링크에 포함된 토큰으로 비밀번호를 재설정합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, newPassword]
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: "비밀번호 재설정 성공"
        "400":
          description: "토큰이 만료되었거나 유효하지 않음"
  /teams/grouped:
    get:
      summary: "모든 조의 팀 목록을 조별로 그룹화하고 순위별로 정렬해서 조회"
      tags: 
        - teams
      responses:
        "200":
          description: "조별로 그룹화된 팀 목록 반환 (각 조 내부는 순위 순 정렬)"
          content:
            application/json:
              schema:
                  $ref : "#/components/schemas/GroupedTeamResponse"
  /games:
    get:
      summary: "날짜 범위에 따른 경기 일정 조회"
      tags: 
        - games
      parameters: 
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date
          description: "조회 시작 날짜 (YYYY-MM-DD 형태)"
          example: "2025-04-23"
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date
          description: "조회 종료 날짜 (YYYY-MM-DD 형태, 미입력 시 from으로부터 6일)"
          example: "2025-04-25"
      responses:
        "200":
          description: "날짜 범위 내 경기 일정 정보"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GamesByDatesResponse"
        "400":
          description: "잘못된 파라미터 형식"
        "404":
          description: "해당 날짜 범위의 경기가 존재하지 않음"

  /games/{gameId}/players:
    get:
      summary: "특정 경기의 선수 목록 조회"
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
      responses:
        "200":
          description: "성공적으로 선수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponse"
  /games/{gameId}/players-with-in-lineup:
    get:
      summary: "특정 경기의 선수 목록 조회 for 교체명단 등록"
      description: |
        라인업 등록여부를 inLineup 필드에 표시합니다.
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
      responses:
        "200":
          description: "성공적으로 선수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListWithInLineupResponse"

  /games/{gameId}/substitution:
    post:
      summary: "특정 경기의 교체 명단 제출"
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitSubstitutionRequest"
      responses:
        "200":
          description: "교체 명단 제출 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitSubstitutionResponse"
        "400":
          description: "잘못된 요청 (예: 이미 제출된 라인업, 중복된 선수, 인원이 부족 등)"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"
  /records/batters:
    get:
      summary: "전체 타자 기록 조회"
      description: |
        전체 타자 기록을 반환합니다. 안타 수가 1이상인 선수들을 안타 수를 기준으로 내림차순 정렬합니다.
      tags:
        - "records"
      responses:
        "200":
          description: "성공적으로 타자 기록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatterRecordsResponse"
        "500":
          description: "서버 내부 오류"
        
  /records/pitchers:
    get:
      summary: "탈삼진 수를 기준으로 상위 20명 반환"
      tags:
        - "records"
      responses:
        "200":
          description: "성공적으로 투수 기록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PitcherRecordsResponse"
        "500":
          description: "서버 내부 오류"

          
  # /records/batters:
  #   get:
  #     summary: "타자 기록 조회 (상위 N명, 정렬 기준 설정)"
  #     description: |
  #       타자 기록을 특정 정렬 기준에 따라 상위 N명까지 반환합니다.
  #       - limit 파라미터로 최대 몇 명까지 받을지 지정 (기본 5)
  #       - sortBy 파라미터로 정렬 기준 지정 (AB, H, 2B, 3B, HR, BB, AVG, OBP, SLG, OPS)
  #     tags:
  #       - "records"
  #     parameters:
  #       - in: query
  #         name: limit
  #         schema:
  #           type: integer
  #           minimum: 1
  #           default: 5
  #         required: false
  #         description: "가져올 상위 선수 수 (예: 5, 20)"
  #         example: 5

  #       - in: query
  #         name: sortBy
  #         schema:
  #           type: string
  #           default: "AVG"
  #           enum: [AB, H, 2B, 3B, HR, BB, AVG, OBP, SLG, OPS]
  #         required: false
  #         description: |
  #           정렬 기준 
  #           - AB: 타수
  #           - H: 안타
  #           - 2B: 2루타
  #           - 3B: 3루타
  #           - HR: 홈런
  #           - BB: 볼넷
  #           - AVG: 타율
  #           - OBP: 출루율
  #           - SLG: 장타율
  #           - OPS: OPS
            

  #     responses:
  #       "200":
  #         description: "성공적으로 타자 기록을 가져옴"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/BatterRecordsResponse"
  #       "400":
  #         description: "잘못된 요청 (파라미터 범위/값 오류 등)"

  # /records/pitchers:
  #   get:
  #     summary: "투수 기록 조회 (상위 N명, 정렬 기준 설정)"
  #     description: |
  #       투수 기록을 탈삼진 기준에 따라 내림차순 정렬 후상위 N명까지 반환합니다.
  #       - limit 파라미터로 최대 몇 명까지 받을지 지정 (기본 5)
  #     tags:
  #       - "records"
  #     parameters:
  #       - in: query
  #         name: limit
  #         schema:
  #           type: integer
  #           minimum: 1
  #           default: 5
  #         required: false
  #         description: "가져올 상위 선수 수 (예: 5, 20)"
  #         example: 20


  #     responses:
  #       "200":
  #         description: "성공적으로 투수 기록을 가져옴"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/PitcherRecordsResponse"
  #       "400":
  #         description: "잘못된 요청 (파라미터 범위/값 오류 등)"
  /teams/{teamId}/players:
    get:
      summary: "특정 팀의 선수 목록 조회"
      description: |
        팀 ID를 경로로 받아 해당 팀에 소속된 선수들을 리스트업합니다.
      tags:
        - "teams"
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: "팀의 ID"
          example: 1

      responses:
        "200":
          description: "성공적으로 선수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponse"
        "404":
          description: "해당 팀이 존재하지 않는 경우"

  /games/{gameId}/substitutable-batters:
    get:
      summary: "특정 경기의 교체 가능한 타자 목록 조회"
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      responses:
        "200":
          description: "성공적으로 교체 가능한 타자 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponseWithSubstitutionFlag"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"
  
  /games/{gameId}/substitutable-pitchers:
    get:
      summary: "특정 경기의 교체 가능한 투수 목록 조회"
      tags:
        - "games" 
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      responses:
        "200":
          description: "성공적으로 교체 가능한 투수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponseWithSubstitutionFlag"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"
  /games/{gameId}/lineup:
    get:
      summary: "특정 경기의 라인업 조회"
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
        # - name: purpose
        #   in: query
        #   required: false
        #   schema:
        #     type: string
        #     enum: [lineup, substitution]
        #     default: "lineup"
        #   description: "라인업 조회 목적"
        #   example: "lineup"
      responses:
        "200":
          description: "특정 경기의 라인업 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineupResponse"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"
          
    post:
      summary: "특정 경기의 라인업 제출"
      tags:
      - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitLineupRequest"
      responses:
        "200":
          description: "라인업 제출 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitLineupResponse"
        "400":
          description: "잘못된 요청 (예: 이미 제출된 라인업, 중복된 선수, 인원이 부족 등)"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"
    patch:
      summary: "특정 경기의 라인업 부분 수정(사용 x)"
      description: |
        - 서버는 전달받은 `batters` 또는 'pitcher' 목록에 있는 선수들만 **DB 업데이트**합니다.
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitLineupRequest"
      responses:
        "200":
          description: "라인업 수정 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitLineupResponse"
        "400":
          description: "잘못된 요청 (중복 타순, 없는 선수, 이미 교체 불가 상황 등)"
        "404":
          description: "해당 경기 또는 팀(혹은 선수)을 찾을 수 없음"

# paths 섹션에 추가
  /games/{gameId}/start:
    post:
      summary: "게임 시작"
      description: |
        게임을 시작하고 초기 상태를 설정합니다.
        - 게임 상태를 IN_PROGRESS로 변경
        - GameStat 생성 및 초기화 (점수 0, 1회초, 원정팀 1번타자 vs 홈팀 선발투수)
        - 양 팀의 라인업이 모두 제출되어 있어야 함
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "게임 ID"
          example: 1001
      responses:
        "200":
          description: "게임 시작 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "게임이 시작되었습니다."
                  gameStat:
                    type: object
                    properties:
                      gameId:
                        type: integer
                        example: 1001
                      homeScore:
                        type: integer
                        example: 0
                      awayScore:
                        type: integer
                        example: 0
                      homeHits:
                        type: integer
                        example: 0
                      awayHits:
                        type: integer
                        example: 0
                      inning:
                        type: integer
                        example: 1
                      inningHalf:
                        type: string
                        enum: ["TOP", "BOT"]
                        example: "TOP"
                      homePitcherParticipationId:
                        type: integer
                        example: 101
                      homeBatterParticipationId:
                        type: integer
                        example: 201
                      awayPitcherParticipationId:
                        type: integer
                        example: 102
                      awayBatterParticipationId:
                        type: integer
                        example: 202
        "400":
          description: |
            잘못된 요청
            - 이미 시작된 게임
            - 라인업이 제출되지 않은 경우
            - 필수 선수(투수, 타자)가 없는 경우
        "404":
          description: "게임을 찾을 수 없음"
  /games/{gameId}/current-batter:
    get:
      summary: "현재 타자 조회"
      description: "특정 경기의 현재 타순 타자를 조회합니다."
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      responses:
        "200":
          description: "현재 타자 정보 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentBatterResponse"
        "404":
          description: "해당 경기나 현재 타자 정보가 없는 경우"

  /games/{gameId}/current-pitcher:
    get:
      summary: "현재 투수 조회"
      description: "특정 경기의 현재 투수를 조회합니다."
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
      responses:
        "200":
          description: "현재 투수 정보 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentPitcherResponse"
        "404":
          description: "해당 경기나 투수 정보가 없는 경우"

  /games/{gameId}/scores:
    post:
      summary: "현재 이닝 점수 기록 (이닝/초말은 서버가 판단)"
      description: |
        - 클라이언트는 단순히 득점 수만 보냄
        - 서버는 현재 경기 상태를 기준으로 (inning, inningHalf)를 판단하여 기록
        - 이미 기록된 경우 400 에러
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleScoreRequest"
      responses:
        "201":
          description: "점수 등록 성공 및 스코어보드 반환."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoreboardResponse"
        "400":
          description: "이미 기록된 이닝/초말 점수거나 경기 진행 상태가 올바르지 않음"
        "404":
          description: "존재하지 않는 경기 ID"

    
    get:
      summary: "특정 경기(game)의 이닝별 득점 조회 (스코어보드)"
      description: |
        - 예: 1회초/말 점수부터 n회초/말까지 기록된 스코어를 반환
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
      responses:
        "200":
          description: "이닝별 득점 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListInningScoresResponse"
        "404":
          description: "경기가 존재하지 않음 (또는 아직 스코어가 전혀 기록되지 않은 경우)"
          
  /games/{gameId}/scores/{inning}/{inningHalf}:
    patch:
      summary: "특정 이닝(초/말) 점수 수정"
      description: |
        - 기록이 없으면 404 에러
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: inning
          in: path
          required: true
          schema:
            type: integer
        - name: inningHalf
          in: path
          required: true
          schema:
            type: string
            enum: [TOP, BOT]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InningHalfScore"
      responses:
        "200":
          description: "점수 수정 성공 및 스코어보드 반환."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoreboardResponse"
        "404":
          description: "해당 이닝/초말 점수가 존재하지 않음"

  /games/{gameId}/plate-appearance:
    post:
      summary: "특정 경기에서 타자의 타석 결과 기록"
      description: |
        - 
        - 서버는 DB(batter_game_stats)를 업데이트
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기(매치) ID"
          example: 1001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatterPlateAppearanceRequest"
      responses:
        "200":
          description: "타석 기록 성공 (DB 업데이트 완료)"
        "400":
          description: "잘못된 요청 (예: 잘못된 결과값, 없는 선수ID, 경기 종료 등)"
        "404":
          description: "경기나 선수 찾을 수 없음"

  /games/{gameId}/results:
    get:
      summary: "경기 결과 조회 (스코어보드 + 팀/선수 기록)"
      description: |
        종료된 경기(gameId)에 대한:
        - 이닝별 득점(스코어보드)
        - 팀별 총 득점, 안타 등
        - 선수별 당일 스탯(타자, 투수)
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 101
      responses:
        "200":
          description: "경기 결과 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResultsResponse"
        "404":
          description: "경기(gameId) 없음"

    post:
      summary: "경기 결과 생성 (스코어보드 + 팀/선수 기록)"
      description: |
        - 경기 종료 후 결과 생성
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 101
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleScoreRequest"
      responses:
        "200":
          description: "경기 결과 생성 성공"
        "400":
          description: "이미 종료된 경기, 또는 정합성 오류"
        "404":
          description: "경기(gameId) 없음"

  /games/{gameId}/results/batters/{batterGameStatsId}:
    patch:
      summary: "타자 기록 수정 (타수/안타/홈런/볼넷)"
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 101
        - name: batterGameStatsId
          in: path
          required: true
          schema:
            type: integer
          description: "선수 경기 기록 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBatterStatsRequest"
      responses:
        "200":
          description: "결과 수정 성공 → 수정된 결과 반환"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateBatterResponse"
        "400":
          description: "정합성 오류 등 잘못된 요청"
        "404":
          description: "경기(gameId) 없음"

  /games/{gameId}/results/pitchers/{pitcherGameStatsId}:
    patch:
      summary: "투수 기록 수정 (K)"
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 101
        - name: pitcherGameStatsId
          in: path
          required: true  
          schema:
            type: integer
          description: "선수 경기 기록 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePitcherStatsRequest"
      responses:
        "200":
          description: "결과 수정 성공 → 수정된 결과 반환"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePitcherResponse"
        "400":
          description: "정합성 오류 등 잘못된 요청"
  
  /games/{gameId}/results/finalize:
    post:
      summary: "경기 결과 최종 확정"
      description: |
        - 스코어, 팀 득점/승패 반영
        - 선수별 기록(타격/투수) 통산 스탯에 반영
        - 최종 확정된 결과를 반환
      tags:
        - "games"
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 101
      responses:
        "200":
          description: "경기 종료 및 확정 성공"
        "400":
          description: "이미 종료된 경기, 또는 정합성 오류"
        "404":
          description: "경기(gameId) 없음"

components:
  schemas:
    GroupedTeamResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TeamList"
      example:
        A:
          - id: 1
            name: "관악사"
            games: 4
            wins: 4
            draws: 0
            losses: 0
            rank: 1
          - id: 2
            name: "포톤스"
            games: 4
            wins: 3
            draws: 0
            losses: 1
            rank: 2
        B:
          - id: 3
            name: "아갉쥐"
            games: 4
            wins: 2
            draws: 0
            losses: 2
            rank: 1
    
    TeamList:
      type: array
      items:
        $ref: "#/components/schemas/Team"

    Team:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "관악사"
        games:
          type: integer
          example: 4
        wins:
          type: integer
          example: 2
        draws:
          type: integer
          example: 0
        losses:
          type: integer
          example: 2
        rank:
          type: integer
          example: 1
    # 전체 응답 스키마
    GameScheduleResponse:
      type: object
      properties:
        date:
          type: string
          format: date
          description: "요청 날짜 (YYYY-MM-DD)"
          example: "2025-04-13"
        dayOfWeek:
          type: string
          description: "요일 정보"
          example: "일"
        games:
          type: array
          description: "해당 날짜의 경기 목록"
          items:
            $ref: "#/components/schemas/Game"
      required:
        - date
        - games
      example:
        date: "2025-04-13"
        dayOfWeek: "일"
        games:
          - 
            gameId: 101
            time: "09:00"
            status: "FINALIZED"
            homeTeam:
              id: 1
              name: "자연대"
              score: 9
            awayTeam:
              id: 2
              name: "공대"
              score: 16
            
          - 
            gameId: 102
            time: "11:00"
            status: "EDITING"
            homeTeam:
              id: 1
              name: "자연대"
              score: 9
            awayTeam:
              id: 2
              name: "건환공"
              score: 6
            
          - 
            gameId: 103
            time: "14:00"
            status: "IN_PROGRESS"
            inning: 5
            inningHalf: "BOT"
            homeTeam:
              id: 1
              name: "관악사"
              score: 10
            awayTeam:
              id: 2
              name: "공대"
              score: 6
            
          - 
            gameId: 104
            time: "16:30"
            status: "SCHEDULED"
            homeTeam:
              id: 1
              name: "자연대"
              score: null
            awayTeam:
              id: 2
              name: "공대"
              score: null
            
          - 
            gameId: 105
            time: "19:00"
            status: "SCHEDULED"
            homeTeam:
              id: 1
              name: "자연대"
              score: null
            awayTeam:
              id: 2
              name: "공대"
              score: null


    # 경기 하나에 대한 스키마
    Game:
      type: object
      properties:
        gameId:
          type: integer
          description: "경기 ID"
          example: 101
        time:
          type: string
          description: "경기 시작 시간 (HH:MM)"
          example: "09:00"
        status:
          type: string
          description: "경기 상태"
          example: "IN_PROGRESS"
        inning:
          type: integer
          nullable: true
          description: "현재 이닝"
          example: 5
        inningHalf:
          type: string
          description: "초/말"
          example: "BOT"
        homeTeam:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "관악사"
            score:
              type: integer
              nullable: true
              example: 10
        awayTeam:
          type: object
          properties:
            id:
              type: integer
              example: 2
            name:
              type: string
              example: "공대"
            score:
              type: integer
              nullable: true
              example: 6
      required:
        - time
        - status
        - homeTeam
        - awayTeam


    BatterRecordsResponse:
      type: object
      properties:
        count:
          type: integer
          description: "가져온 타자 수"
          example: 150
        batters:
          type: array
          description: "타자 기록 배열"
          items:
            $ref: "#/components/schemas/BatterRecord"
      required:
        - count
        - batters

    BatterRecord:
      type: object
      properties:
        playerName:
          type: string
          description: "선수 이름"
          example: "박병호"
        teamName:
          type: string
          description: "소속 팀 이름"
          example: "관악사"
        teamGameCount:
          type: integer
          description: "소속 팀 경기 수"
          example: 4
        PA:
          type: integer
          description: "타자 기록 수"
          example: 100
        AB:
          type: integer
          description: "타수 (At Bats)"
          example: 20
        H:
          type: integer
          description: "안타 수 (Hits)"
          example: 12
        "2B":
          type: integer
          description: "2루타 (Doubles)"
          example: 3
        "3B":
          type: integer
          description: "3루타 (Triples)"
          example: 1
        HR:
          type: integer
          description: "홈런 (Home Runs)"
          example: 0
        BB:
          type: integer
          description: "볼넷 (Base on Balls)"
          example: 1
        AVG:
          type: string
          format: float
          description: "타율 (Batting Average)"
          example: "0.312"
        OBP:
          type: string
          format: float
          description: "출루율 (On-Base Percentage)"
          example: "0.370"
        SLG:
          type: string
          format: float
          description: "장타율 (Slugging Percentage)"
          example: "0.550"
        OPS:
          type: string
          format: float
          description: "OPS (On-base + Slugging)"
          example: "0.920"
      required:
        - rank
        - playerName
        - teamName
        - AB
        - H
        - AVG
      # (필요 시 "2B", "3B", "HR", "BB" 등도 필수에 넣을 수 있음)

    PitcherRecordsResponse:
      type: object
      properties:
        count:
          type: integer
          description: "가져온 투수 수"
          example: 20
        pitchers:
          type: array
          description: "투수 기록 배열"
          items:
            $ref: "#/components/schemas/PitcherRecord"
      required:
        - count
        - pitchers

    PitcherRecord:
      type: object
      properties:
        playerName:
          type: string
          description: "선수 이름"
          example: "배찬송"
        teamName:
          type: string
          description: "소속 팀 이름"
          example: "관악사"
        K:
          type: integer
          description: "삼진 수"
          example: 12
      required:
        - rank
        - playerName
        - teamName
        - K
    # 전체 응답
    PlayerListResponse:
      type: object
      properties:
        id:
          type: integer
          description: "팀 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "공대"
        players:
          type: array
          description: "선수 배열"
          items:
            $ref: "#/components/schemas/Player"
      required:
        - id
        - name
        - players
      example:
        id: 1
        name: "공대"
        players:
          - id: 101
            name: "윤동현"
            departmentName: "수학교육과"
            isElite: false
            isWc: false
          - id: 102
            name: "김준기"
            departmentName: "언론정보학과"
            isElite: false
            isWc: false
          - id: 103
            name: "김태균"
            departmentName: "사회학과"
            isElite: true
            isWc: false
          - id: 104
            name: "박야구"
            departmentName: "컴퓨터공학과"
            isElite: false
            isWc: false   # 이미 선택되어 더 이상 선택 불가
    PlayerListWithInLineupResponse:
      type: object
      properties:
        id:
          type: integer
          description: "팀 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "공대"
        players:
          type: array
          description: "선수 배열"
          items:
            $ref: "#/components/schemas/Player"
      required:
        - id
        - name
        - players
      example:
        id: 1
        name: "공대"
        players:
          - id: 101
            departmentName: "수학교육과"
            name: "윤동현"
            isElite: false
            isWc: false
            inLineup: true
          - id: 102
            departmentName: "언론정보학과"
            playerName: "김준기"
            isElite: false
            isWc: false
            inLineup: false
          - id: 103
            departmentName: "사회학과"
            playerName: "김태균"
            isElite: true
            isWc: false
            inLineup: false
          - id: 104
            departmentName: "컴퓨터공학과"
            playerName: "박야구"
            isElite: false
            isWc: false   # 이미 선택되어 더 이상 선택 불가
            inLineup: false

    # 선수 개별 정보
    Player:
      type: object
      properties:
        id:
          type: integer
          description: "선수 ID"
          example: 101
        departmentName:
          type: string
          description: "학과"
          example: "수학교육과"
        name:
          type: string
          description: "선수 이름"
          example: "윤동현"
        isElite:
          type: boolean
          description: "선출 여부 (true면 프로 경험자)"
          example: false
        isWc:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false  
      required:
        - id
        - departmentName
        - name
        - isElite
        - isWc

    PlayerListResponseWithSubstitutionFlag:
      type: object
      properties:
        teamId:
          type: integer
          description: "팀 ID"
          example: 1
        teamName:
          type: string
          description: "팀 이름"
          example: "공대"
        # lineup:
        #   type: array
        #   description: "라인업"
        #   items:
        #     $ref: "#/components/schemas/LineupResponse"
        players:
          type: array
          description: "선수 목록"
          items:
            $ref: "#/components/schemas/PlayerWithSubstitutionFlag"
      required:
        - id
        - name
        - players
    PlayerWithSubstitutionFlag:
      type: object
      properties:
        id:
          type: integer
          description: "선수 ID"
          example: 101
        name:
          type: string
          description: "선수 이름"
          example: "윤동현"
        departmentName:
          type: string
          description: "학과"
          example: "수학교육과"
        isElite:
          type: boolean
          description: "선출 여부 (true면 프로 경험자)"
          example: false
        isWc:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
        isSubstitutable:
          type: boolean
          description: "해당 선수가 교체 가능한지 여부"
      required:
        - id
        - name
        - departmentName
        - isSubstitutable
          
    LineupResponse:
      type: object
      properties:
        batters:
          type: array
          description: "타순별 선수 목록"
          items:
            $ref: "#/components/schemas/LineupBatterWithName"
        pitcher:
          $ref: "#/components/schemas/LineupPitcherWithName"

    SubmitLineupRequest:
      type: object
      properties:
        batters:
          type: array
          description: "타순별(혹은 투수 포함) 등록 선수 목록"
          items:
            $ref: "#/components/schemas/LineupBatter"
          minItems: 9
          maxItems: 9
        
        pitcher:
            $ref: "#/components/schemas/LineupPitcher"
      required:
        - batters
        - pitcher
      example:
        batters:
          - battingOrder : 1
            playerId: 101
            position: "CF"
          - battingOrder: 2
            playerId: 102
            position: "SS"
          - battingOrder: 3
            playerId: 103
            position: "C"
          - battingOrder: 4
            playerId: 104
            position: "1B"
          - battingOrder: 5
            playerId: 105
            position: "2B"
          - battingOrder: 6
            playerId: 106
            position: "3B"
          - battingOrder: 7
            playerId: 107
            position: "LF"
          - battingOrder: 8
            playerId: 108
            position: "RF"
          - battingOrder: 9
            playerId: 109
            position: "DH"
        pitcher:
          playerId: 110

    LineupBatter:
      type: object
      properties:
        battingOrder:
          type: integer
          nullable: true
          description: |
            타순 (1~9)
          example: 1
        playerId:
          type: integer
          description: "선수 고유 ID"
          example: 101
        position:
          type: string
          description: "포지션 (CF, SS, C, 1B, 2B, 3B, LF, RF, DH, P 등)"
          example: "CF"
      required:
        - playerId
        - battingOrder
        - position
    LineupBatterWithName:
      type: object
      properties:
        battingOrder:
          type: integer
          nullable: true
          description: |
            타순 (1~9)
          example: 1
        playerId:
          type: integer
          description: "선수 고유 ID"
          example: 101
        playerName:
          type: string
          description: "선수 이름"
          example: "윤동현"
        position:
          type: string
          description: "포지션 (CF, SS, C, 1B, 2B, 3B, LF, RF, DH, P 등)"
          example: "CF"
        isWC:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
      required:
        - playerId
        - battingOrder
        - position
        - playerName
    LineupPitcher:
      type: object
      properties:
        playerId:
          type: integer
          description: "투수 선수 ID"
      required:
        - playerId
        - position

    LineupPitcherWithName:
      type: object
      properties:
        playerId:
          type: integer
          description: "투수 선수 ID"
        playerName:
          type: string
          description: "선수 이름"
          example: "김철수"
        isWC:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
      required:
        - playerId
        - playerName
          
    SubmitLineupResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "라인업 등록 성공 여부"
          example: true
        message:
          type: string
          description: "추가 메시지 (예: '라인업 제출이 완료되었습니다.')"
          example: "라인업 제출이 완료되었습니다."
      required:
        - success
      example:
        success: true
        message: "라인업 제출이 완료되었습니다."
    PatchLineupRequest:
      type: object
      properties:
        batters:
          type: array
          description: |
            타자만 교체할 경우 `batters`만 포함  
            투수만 교체할 경우 `pitcher`만 포함  
            둘 다 교체할 경우 두 필드를 모두 포함
          items:
            $ref: "#/components/schemas/LineupBatterUpdate"
        
        pitcher:
          $ref: "#/components/schemas/LineupPitcherUpdate"
      
      example:
        batters:
          - battingOrder: 5
            playerId: 999
            position: "2B"
        pitcher:
          playerId: 110

    LineupBatterUpdate:
      type: object
      properties:
        battingOrder:
          type: integer
          nullable: true
          description: |
            변경할 타순 (1~9).  
          example: 5
        playerId:
          type: integer
          description: "새로 교체될 선수 ID (또는 교체 대상)."
          example: 999
        position:
          type: string
          description: "포지션 (예: '2B', 'P', 'SS' 등)."
          example: "2B"
      required:
        - playerId
        - position
    
    LineupPitcherUpdate:
      type: object
      properties:
        playerId:
          type: integer
          description: "교체될 투수 선수 ID"
          example: 110
      required:
        - playerId
        
    PatchLineupResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "라인업 수정 성공 여부"
          example: true
        message:
          type: string
          description: "추가 메시지 (예: '라인업 수정이 완료되었습니다.')"
          example: "라인업 수정이 완료되었습니다."
      required:
        - success
      example:
        success: true
        message: "라인업 수정이 완료되었습니다."
    
    CurrentBatterResponse:
      type: object
      properties:
        playerId:
          type: integer
          description: "선수 ID"
          example: 101
        playerName:
          type: string
          description: "선수 이름"
          example: "홍길동"
        position:
          type: string
          description: "포지션"
          example: "CF"
        battingOrder:
          type: integer
          description: "현재 타순 (1~9)"
          example: 3


    CurrentPitcherResponse:
      type: object
      properties:
        playerId:
          type: integer
          description: "선수 ID"
          example: 55
        playerName:
          type: string
          description: "선수 이름"
          example: "김철수"
        position:
          type: string
          description: "포지션"
          example: "P"

    SimpleScoreRequest:
      type: object
      properties:
        runs:
          type: integer
          example: 1
          description: "득점 수"
      required:
        - runs

    ScoreboardResponse:
      type: object
      properties:
        scoreboard:
          type: array
          description: "이닝별 전체 점수 목록"
          items:
            $ref: "#/components/schemas/InningHalfScore"
        teamSummary:
          type: object
          properties:
            home:
              $ref: "#/components/schemas/TeamSummary"
            away:
              $ref: "#/components/schemas/TeamSummary"
      required:
        - scoreboard
      example:
        scoreboard:
          - inning: 1
            inningHalf: "TOP"
            runs: 0
          - inning: 1
            inningHalf: "BOT"
            runs: 1
          - inning: 2
            inningHalf: "TOP"
            runs: 2
        teamSummary:
          home:
            id: 1
            name: "공대"
            runs: 1
            hits: 1
          away:
            id: 2
            name: "건환공"
            runs: 2
            hits: 2


    TeamSummary:
      type: object
      properties:
        id:
          type: integer
          description: "팀 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "공대"
        runs:
          type: integer
          description: "총 득점"
          example: 4
        hits:
          type: integer
          description: "총 안타"
          example: 4
      required:
        - id
        - name
        - runs
        - hits
    InningHalfScore:
      type: object
      properties:
        runs:
          type: integer
          nullable: true
          description: "득점 (아직 기록되지 않은 경우 null)"
          example: 1
      required:
        - runs



    InningScoreResponse:
      type: object
      properties:
        inning:
          type: integer
          description: "이닝 번호"
          example: 3
        inningHalf:
          type: string
          enum: ["TOP", "BOT"]
          description: "초(TOP) or 말(BOT)"
          example: "TOP"
        runs:
          type: integer
          description: "해당 inningHalf-inning 점수"
          example: 2
      required:
        - inning
        - inningHalf
        - runs
      example:
        inning: 3
        inningHalf: "TOP"
        runs: 2

    ListInningScoresResponse:
      type: object
      properties:
        scoreboard:
          type: array
          description: "이닝별 득점 목록"
          items:
            $ref: "#/components/schemas/InningScoreResponse"
        teamSummary:
          type: object
          properties:
            home:
              $ref: "#/components/schemas/TeamSummary"
            away:
              $ref: "#/components/schemas/TeamSummary"  
      required:
        - scoreboard
      example:
        scoreboard:
          - inning: 1
            inningHalf: "TOP"
            runs: 1
          - inning: 1
            inningHalf: "BOT"
            runs: 0
          - inning: 2
            inningHalf: "TOP"
            runs: 2
          - inning: 2
            inningHalf: "BOT"
            runs: 1
        teamSummary:
          home:
            id: 1
            name: "공대"
            runs: 2
            hits: 3
          away:
            id: 2
            name: "건환공"
            runs: 1
            hits: 2
    BatterPlateAppearanceRequest:
      type: object
      properties:
        result:
          type: string
          description: |
            타석 결과 (안타/2루타/3루타/홈런/볼넷/희생타/아웃 등)
          enum: ["1B", "2B", "3B", "HR", "BB", "SAC", "OUT"]
          example: "2B"
      required:
        - result
      example:
        result: "2B"
        
        


    # 타자 당일 기록
    BatterDailyStats:
      type: object
      properties:
        battingOrder:
          type: integer
          description: "타순"
          example: 1
        substitutionOrder:
          type: integer
          description: "교체 순서"
          example: 1
        batterGameStatsId:
          type: integer
          example: 101
        playerName:
          type: string
          example: "김지찬"
        AB:
          type: integer
          description: "타수"
          example: 2
        H:
          type: integer
          description: "안타"
          example: 1
        HR:
          type: integer
          description: "홈런"
          example: 0
        BB:
          type: integer
          description: "볼넷"
          example: 1
      required:
        - batterGameStatsId
        - playerName
        - battingOrder
        - substitutionOrder
        - AB
        - H
        - HR
        - BB

    # 투수 당일 기록
    PitcherDailyStats:
      type: object
      properties:
        pitcherGameStatsId:
          type: integer
          example: 110
        playerName:
          type: string
          example: "발라조빅"
        K:
          type: integer
          description: "삼진"
          example: 5
        # 필요하면 실점/이닝수/볼넷/ERA 등 추가 가능
      required:
        - pitcherGameStatsId
        - playerName
        - K

    # ----- GET /gamees/{gameId}/results 응답 -----
    GameResultsResponse:
      
      type: object
      properties:
        scoreboard:
          type: array
          description: "이닝별 득점"
          items:
            $ref: "#/components/schemas/InningHalfScore"
        teamSummary:
          type: object
          properties:
            home:
              $ref: "#/components/schemas/TeamSummary"
            away:
              $ref: "#/components/schemas/TeamSummary"
        batterStats:
          type: object
          properties:
            home:
              type: array
              description: "원정팀 타자 기록"
              items:
                $ref: "#/components/schemas/BatterDailyStats"
            away:
              type: array
              description: "홈팀 타자 기록"
              items:
                $ref: "#/components/schemas/BatterDailyStats"
        pitcherStats:
          type: object
          properties:
            home:
              type: array
              description: "원정팀 투수 기록"
              items:
                $ref: "#/components/schemas/PitcherDailyStats"
            away:
              type: array
              description: "홈팀 투수 기록"
              items:
                $ref: "#/components/schemas/PitcherDailyStats"
      required:
        - scoreboard
        - teamSummary
        - batterStats
        - pitcherStats

    # ----- PATCH /gamees/{gameId}/results 요청 스키마 -----
    UpdateBatterStatsRequest:
      type: object
      properties:
        AB:
          type: integer
          description: "타수"
          example: 2
        H:
          type: integer
          description: "안타"
          example: 1
        BB:
          type: integer
          description: "볼넷"
          example: 1
        "2B":
          type: integer
          description: "2루타"
          example: 0
        "3B":
          type: integer
          description: "3루타"
          example: 0
        HR:
          type: integer
          description: "홈런"
          example: 0
        SAC:
          type: integer
          description: "희생타"
          example: 0
    UpdateBatterResponse:
      type: object
      properties:
        batterGameStatsId:
          type: integer
          description: "선수 경기 기록 ID"
          example: 101
        playerName:
          type: string
          description: "선수 이름"
          example: "김지찬"
        battingOrder:
          type: integer
          description: "타순"
          example: 1
        substitutionOrder:
          type: integer
          description: "교체 순서"
          example: 1
        AB:
          type: integer
          description: "타수"
          example: 2
        H:
          type: integer
          description: "안타"
          example: 1
        BB:
          type: integer
          description: "볼넷"
          example: 1
        "2B":
          type: integer
          description: "2루타"
          example: 0
        "3B":
          type: integer
          description: "3루타"
          example: 0
        HR:
          type: integer
          description: "홈런"
          example: 0
        SAC:
          type: integer
          description: "희생타"
          example: 0

    UpdatePitcherStatsRequest:
      type: object
      properties:      
        K:
          type: integer
          description: "삼진"
          example: 5

      example:
        K: 5
    UpdatePitcherResponse:
      type: object
      properties:
        pitcherGameStatsId:
          type: integer
          description: "선수 경기 기록 ID"
          example: 110
        playerName:
          type: string
          description: "선수 이름"
          example: "발라조빅"
        K:
          type: integer
          description: "삼진"
          example: 5

    SubmitSubstitutionRequest:
      type: object
      properties:
        playerIds:
          type: array
          description: "교체할 선수 ID 목록"
          example: [101, 102]
      required:
        - playerIds

    SubmitSubstitutionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "교체 명단 제출 성공 여부"
        playerIds:
          type: array
          description: "교체된 선수 ID 목록"
          example: [101, 102]
      required:
        - success
        - playerIds
    GamesByDatesResponse:
      type: object
      properties:
        range:
          type: object
          properties:
            from:
              type: string
              format: date
              description: "조회 시작 날짜 (YYYY-MM-DD)"
              example: "2025-04-23"
            to:
              type: string
              format: date
              description: "조회 종료 날짜 (YYYY-MM-DD)"
              example: "2025-04-25"
        days:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                description: "날짜 (YYYY-MM-DD)"
                example: "2025-04-23"
              dayOfWeek:
                type: string
                description: "요일 정보"
                example: "수"
              games:
                type: array
                description: "해당 날짜의 경기 목록"
                items:
                  $ref: "#/components/schemas/Game"
      required:
        - range
        - days
      example:
        range:
          from: "2025-04-23"
          to: "2025-04-25"
        days:
          - 
            date: "2025-04-23"
            dayOfWeek: "수"
            games:
              - 
                time: "10:00"
                status: "SCHEDULED"
                homeTeam:
                  id: 1
                  name: "정호아카데미"
                  score: 0
                awayTeam:
                  id: 2
                  name: "재료공"
                  score: 0
              - 
                time: "12:00" 
                status: "SCHEDULED"
                homeTeam:
                  id: 3
                  name: "test1"
                  score: 0
                awayTeam:
                  id: 4
                  name: "test2"
                  score: 0
          - 
            date: "2025-04-24"
            dayOfWeek: "목"
            games:
              - 
                time: "14:00"
                status: "EDITING"
                homeTeam:
                  id: 1
                  name: "정호아카데미"
                  score: 0
                awayTeam:
                  id: 4
                  name: "test2"
                  score: 0